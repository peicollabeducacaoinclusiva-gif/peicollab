import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

if (supabaseUrl === 'https://your-project.supabase.co' || supabaseAnonKey === 'your-anon-key') {
  console.log('‚ùå Configure as vari√°veis de ambiente:');
  console.log('VITE_SUPABASE_URL=your-project-url');
  console.log('VITE_SUPABASE_ANON_KEY=your-anon-key');
  console.log('\nüîß Ou execute diretamente no Supabase Dashboard:');
  console.log('1. V√° para SQL Editor');
  console.log('2. Execute o script SQL abaixo');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function refreshSchemaCache() {
  console.log('üîÑ Atualizando cache do schema...\n');

  try {
    // 1. For√ßar refresh do schema fazendo uma query simples
    console.log('1. For√ßando refresh do schema...');
    
    // Fazer uma query que for√ßa o Supabase a atualizar o cache
    const { data: schemaInfo, error: schemaError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .in('table_name', ['profiles', 'user_roles']);

    if (schemaError) {
      console.log('‚ùå Erro ao verificar schema:', schemaError.message);
      return;
    }

    console.log('‚úÖ Schema verificado:', schemaInfo.map(t => t.table_name).join(', '));

    // 2. Testar a rela√ß√£o diretamente
    console.log('\n2. Testando rela√ß√£o profiles -> user_roles...');
    
    const { data: testRelation, error: relationError } = await supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        user_roles(role)
      `)
      .limit(1);

    if (relationError) {
      console.log('‚ùå Erro na rela√ß√£o:', relationError.message);
      
      if (relationError.message.includes('schema cache')) {
        console.log('\nüîß SOLU√á√ÉO: Cache do schema desatualizado');
        console.log('Execute no Supabase Dashboard:');
        console.log('1. V√° para SQL Editor');
        console.log('2. Execute: SELECT pg_notify(\'pgrst\', \'reload schema\');');
        console.log('3. Aguarde 30 segundos');
        console.log('4. Teste novamente');
      }
      return;
    }

    console.log('‚úÖ Rela√ß√£o funcionando!');
    console.log('üìä Dados encontrados:', testRelation.length);

    // 3. Fazer uma query mais complexa para for√ßar o cache
    console.log('\n3. For√ßando cache com query complexa...');
    
    const { data: complexQuery, error: complexError } = await supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        tenant_id,
        school_id,
        user_roles(role),
        tenants(network_name),
        schools(school_name, tenant_id)
      `)
      .limit(5);

    if (complexError) {
      console.log('‚ùå Erro na query complexa:', complexError.message);
      return;
    }

    console.log('‚úÖ Query complexa funcionando!');
    console.log('üìä Profiles encontrados:', complexQuery.length);

    // 4. Testar fun√ß√£o RPC
    console.log('\n4. Testando fun√ß√£o RPC...');
    
    if (complexQuery.length > 0) {
      const { data: primaryRole, error: rpcError } = await supabase
        .rpc('get_user_primary_role', { _user_id: complexQuery[0].id });

      if (rpcError) {
        console.log('‚ùå Erro na fun√ß√£o RPC:', rpcError.message);
      } else {
        console.log(`‚úÖ Fun√ß√£o RPC funcionando! Role: ${primaryRole}`);
      }
    }

    console.log('\nüéâ Cache do schema atualizado com sucesso!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Reinicie a aplica√ß√£o');
    console.log('2. Teste o login no admin');
    console.log('3. Verifique se os dashboards est√£o funcionando');

  } catch (error) {
    console.error('‚ùå Erro durante a atualiza√ß√£o:', error.message);
  }
}

// Executar atualiza√ß√£o
refreshSchemaCache();



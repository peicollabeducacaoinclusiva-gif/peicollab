import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { HelpCircle, Lightbulb } from "lucide-react";

interface DiagnosisData {
  interests: string;
  specialNeeds: string;
  barriers: {
    arquitetonica: string[];
    atitudinal: string[];
    pedagogica: string[];
    comunicacional: string[];
    tecnologica: string[];
    metodologica: string[];
  };
  otherBarrier: string;
  history: string;
}

interface DiagnosisSectionProps {
  diagnosisData: DiagnosisData;
  onDiagnosisChange: (data: DiagnosisData) => void;
}

const DiagnosisSection = ({ diagnosisData, onDiagnosisChange }: DiagnosisSectionProps) => {
  const handleChange = (field: keyof DiagnosisData, value: any) => {
    onDiagnosisChange({ ...diagnosisData, [field]: value });
  };

  const barrierCategories = [
    { 
      id: "arquitetonica", 
      label: "üèõÔ∏è Arquitet√¥nica",
      items: [
        { id: "falta_rampa", label: "Falta de rampas de acesso" },
        { id: "escadas", label: "Escadas sem corrim√£o adequado" },
        { id: "portas_estreitas", label: "Portas estreitas" },
        { id: "banheiro_inadequado", label: "Banheiro n√£o adaptado" },
        { id: "mobiliario", label: "Mobili√°rio inadequado" },
      ]
    },
    { 
      id: "atitudinal", 
      label: "ü§ù Atitudinal",
      items: [
        { id: "preconceito_colegas", label: "Preconceito dos colegas" },
        { id: "resistencia_professores", label: "Resist√™ncia de professores" },
        { id: "falta_sensibilizacao", label: "Falta de sensibiliza√ß√£o da comunidade escolar" },
        { id: "baixas_expectativas", label: "Baixas expectativas em rela√ß√£o ao aluno" },
        { id: "isolamento_social", label: "Isolamento nas atividades sociais" },
      ]
    },
    { 
      id: "pedagogica", 
      label: "üìö Pedag√≥gica",
      items: [
        { id: "material_nao_adaptado", label: "Material did√°tico n√£o adaptado" },
        { id: "curriculo_rigido", label: "Curr√≠culo pouco flex√≠vel" },
        { id: "avaliacao_inadequada", label: "M√©todos de avalia√ß√£o inadequados" },
        { id: "falta_diferenciacao", label: "Falta de diferencia√ß√£o pedag√≥gica" },
        { id: "ritmo_ensino", label: "Ritmo de ensino incompat√≠vel" },
      ]
    },
    { 
      id: "comunicacional", 
      label: "üí¨ Comunicacional",
      items: [
        { id: "falta_libras", label: "Falta de int√©rprete de Libras" },
        { id: "material_visual", label: "Aus√™ncia de materiais visuais" },
        { id: "linguagem_complexa", label: "Linguagem muito complexa" },
        { id: "falta_caa", label: "Falta de comunica√ß√£o alternativa (CAA)" },
        { id: "sinalizacao", label: "Sinaliza√ß√£o inadequada" },
      ]
    },
    { 
      id: "tecnologica", 
      label: "üíª Tecnol√≥gica",
      items: [
        { id: "falta_tecnologia_assistiva", label: "Falta de tecnologia assistiva" },
        { id: "computadores_inadequados", label: "Computadores n√£o adaptados" },
        { id: "software_inacessivel", label: "Software inacess√≠vel" },
        { id: "internet_limitada", label: "Acesso limitado √† internet" },
        { id: "falta_treinamento", label: "Falta de treinamento em tecnologias" },
      ]
    },
    { 
      id: "metodologica", 
      label: "üìã Metodol√≥gica",
      items: [
        { id: "aulas_expositivas", label: "Excesso de aulas expositivas" },
        { id: "falta_pratica", label: "Falta de atividades pr√°ticas" },
        { id: "tempo_insuficiente", label: "Tempo insuficiente para atividades" },
        { id: "grupos_grandes", label: "Grupos muito grandes" },
        { id: "falta_individualizacao", label: "Falta de atendimento individualizado" },
      ]
    },
  ];

  const handleBarrierToggle = (category: string, itemId: string) => {
    const currentCategoryBarriers = diagnosisData.barriers?.[category] || [];
    const newCategoryBarriers = currentCategoryBarriers.includes(itemId)
      ? currentCategoryBarriers.filter(b => b !== itemId)
      : [...currentCategoryBarriers, itemId];
    
    handleChange("barriers", {
      ...diagnosisData.barriers,
      [category]: newCategoryBarriers
    });
  };

  const ExampleTooltip = ({ examples, tutorial }: { examples: string[], tutorial: string }) => (
    <HoverCard>
      <HoverCardTrigger asChild>
        <button type="button" className="ml-2 inline-flex items-center text-primary hover:text-primary/80">
          <Lightbulb className="h-4 w-4" />
        </button>
      </HoverCardTrigger>
      <HoverCardContent className="w-80">
        <div className="space-y-3">
          <div>
            <h4 className="font-semibold text-sm mb-2">üí° Exemplos:</h4>
            <ul className="text-xs space-y-1 list-disc pl-4">
              {examples.map((example, idx) => (
                <li key={idx}>{example}</li>
              ))}
            </ul>
          </div>
          <div className="pt-2 border-t">
            <p className="text-xs text-muted-foreground flex items-start gap-2">
              <HelpCircle className="h-3 w-3 mt-0.5 flex-shrink-0" />
              <span>{tutorial}</span>
            </p>
          </div>
        </div>
      </HoverCardContent>
    </HoverCard>
  );

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">Diagn√≥stico do Aluno</h3>
        <p className="text-sm text-muted-foreground mb-6">
          Preencha as informa√ß√µes sobre o perfil do aluno para construir um diagn√≥stico completo.
        </p>
      </div>

      <Accordion type="multiple" defaultValue={["history", "profile", "barriers"]} className="w-full">
        <AccordionItem value="history" className="border rounded-lg px-4 mb-3">
          <AccordionTrigger className="hover:no-underline">
            <div className="flex items-center gap-2">
              <span className="text-2xl">üìñ</span>
              <span className="font-semibold">Hist√≥rico do Estudante</span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="pt-4 pb-2">
            <div className="space-y-3">
              <div className="flex items-center">
                <Label htmlFor="history" className="text-sm">Hist√≥rico completo</Label>
                <ExampleTooltip
                  examples={[
                    "Aluno matriculado desde 2020, com acompanhamento multidisciplinar desde ent√£o",
                    "Apresentou atraso no desenvolvimento da fala, iniciou fonoaudiologia aos 3 anos",
                    "Fam√≠lia participativa, m√£e acompanha todas as atividades escolares"
                  ]}
                  tutorial="Descreva o trajeto escolar do aluno, seu desenvolvimento ao longo do tempo, contexto familiar e qualquer informa√ß√£o relevante que ajude a compreender sua trajet√≥ria educacional."
                />
              </div>
              <Textarea
                id="history"
                placeholder="Descreva o hist√≥rico escolar, desenvolvimento, contexto familiar e outras informa√ß√µes relevantes..."
                value={diagnosisData.history}
                onChange={(e) => handleChange("history", e.target.value)}
                rows={5}
              />
            </div>
          </AccordionContent>
        </AccordionItem>

        <AccordionItem value="profile" className="border rounded-lg px-4 mb-3">
          <AccordionTrigger className="hover:no-underline">
            <div className="flex items-center gap-2">
              <span className="text-2xl">üë§</span>
              <span className="font-semibold">Perfil do Aluno</span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="pt-4 pb-2 space-y-6">
            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="interests" className="text-sm">üéØ Interesses do Aluno</Label>
                <ExampleTooltip
                  examples={[
                    "Demonstra grande interesse por m√∫sica, gosta de cantar e tocar instrumentos",
                    "Adora atividades com animais, especialmente c√£es e gatos",
                    "Fasc√≠nio por tecnologia, tablets e jogos educativos digitais"
                  ]}
                  tutorial="Identifique o que motiva e engaja o aluno. Esses interesses podem ser usados como estrat√©gias pedag√≥gicas para facilitar o aprendizado e aumentar o engajamento nas atividades."
                />
              </div>
              <Input
                id="interests"
                placeholder="Ex: m√∫sica, arte, esportes, tecnologia..."
                value={diagnosisData.interests}
                onChange={(e) => handleChange("interests", e.target.value)}
              />
              <p className="text-xs text-muted-foreground mt-1">
                Liste os principais interesses e atividades que motivam o aluno
              </p>
            </div>

            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="specialNeeds" className="text-sm">üîç Necessidades Educacionais Especiais</Label>
                <ExampleTooltip
                  examples={[
                    "Diagn√≥stico de Transtorno do Espectro Autista (TEA) - N√≠vel 1, com laudo m√©dico de 2022",
                    "Defici√™ncia intelectual leve, com necessidade de adapta√ß√µes curriculares",
                    "TDAH combinado, em tratamento medicamentoso e acompanhamento psicol√≥gico"
                  ]}
                  tutorial="Registre diagn√≥sticos formais, laudos m√©dicos, avalia√ß√µes psicopedag√≥gicas e todas as necessidades educacionais especiais identificadas. Seja espec√≠fico quanto aos n√≠veis de comprometimento e √†s √°reas afetadas."
                />
              </div>
              <Textarea
                id="specialNeeds"
                placeholder="Descreva as necessidades educacionais especiais identificadas, diagn√≥sticos m√©dicos ou psicopedag√≥gicos relevantes..."
                value={diagnosisData.specialNeeds}
                onChange={(e) => handleChange("specialNeeds", e.target.value)}
                rows={5}
              />
            </div>
          </AccordionContent>
        </AccordionItem>

        <AccordionItem value="barriers" className="border rounded-lg px-4 mb-3">
          <AccordionTrigger className="hover:no-underline">
            <div className="flex items-center gap-2">
              <span className="text-2xl">üöß</span>
              <span className="font-semibold">Barreiras Identificadas</span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="pt-4 pb-2">
            <div className="space-y-3 mb-4">
              <div className="flex items-center">
                <Label className="text-sm">Selecione todas as barreiras aplic√°veis</Label>
                <ExampleTooltip
                  examples={[
                    "Arquitet√¥nica: Falta de rampa de acesso ao segundo andar onde ficam as salas de aula",
                    "Atitudinal: Resist√™ncia de alguns colegas em incluir o aluno em atividades em grupo",
                    "Pedag√≥gica: Material did√°tico n√£o adaptado para o n√≠vel de compreens√£o do aluno"
                  ]}
                  tutorial="Identifique todos os tipos de barreiras que dificultam a aprendizagem e participa√ß√£o do aluno. Marque os itens espec√≠ficos que se aplicam."
                />
              </div>
            </div>
            
            <Accordion type="multiple" className="w-full">
              {barrierCategories.map((category) => (
                <AccordionItem key={category.id} value={category.id} className="border-b">
                  <AccordionTrigger className="py-3 text-sm font-medium">
                    {category.label}
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-2 py-2 pl-2">
                      {category.items.map((item) => (
                        <div key={item.id} className="flex items-center space-x-2">
                          <Checkbox
                            id={`${category.id}-${item.id}`}
                            checked={diagnosisData.barriers?.[category.id]?.includes(item.id)}
                            onCheckedChange={() => handleBarrierToggle(category.id, item.id)}
                          />
                          <Label htmlFor={`${category.id}-${item.id}`} className="font-normal cursor-pointer text-sm">
                            {item.label}
                          </Label>
                        </div>
                      ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>

            <div className="mt-6">
              <Label htmlFor="otherBarrier" className="text-sm">Outras barreiras:</Label>
              <Textarea
                id="otherBarrier"
                placeholder="Descreva outras barreiras identificadas que n√£o se encaixam nas categorias acima..."
                value={diagnosisData.otherBarrier || ""}
                onChange={(e) => handleChange("otherBarrier", e.target.value)}
                rows={3}
                className="mt-2"
              />
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
};

export default DiagnosisSection;

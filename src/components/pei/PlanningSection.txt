import { useState } from "react";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Sparkles, Plus, Trash2, Lightbulb, Info } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface Goal {
  description: string;
  strategies: string[];
  evaluationCriteria: string;
  resources: string;
}

interface PlanningData {
  goals: Goal[];
}

interface PlanningSectionProps {
  planningData: PlanningData;
  diagnosisData: any;
  onPlanningChange: (data: PlanningData) => void;
}

const PlanningSection = ({ planningData, diagnosisData, onPlanningChange }: PlanningSectionProps) => {
  const [generatingAI, setGeneratingAI] = useState(false);
  const { toast } = useToast();

  const handleGenerateWithAI = async () => {
    if (!diagnosisData.interests && !diagnosisData.specialNeeds && !diagnosisData.barriers) {
      toast({
        title: "Aten√ß√£o",
        description: "Preencha pelo menos um campo da se√ß√£o de diagn√≥stico antes de gerar o planejamento.",
        variant: "destructive",
      });
      return;
    }

    try {
      setGeneratingAI(true);
      const { data, error } = await supabase.functions.invoke('generate-pei-planning', {
        body: { diagnosisData }
      });

      if (error) throw error;

      onPlanningChange(data.planningData);
      toast({
        title: "Sucesso",
        description: "Planejamento gerado com IA!",
      });
    } catch (error) {
      console.error("Error generating planning:", error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel gerar o planejamento. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setGeneratingAI(false);
    }
  };

  const addGoal = () => {
    onPlanningChange({
      goals: [
        ...planningData.goals,
        { description: "", strategies: [""], evaluationCriteria: "", resources: "" }
      ]
    });
  };

  const removeGoal = (index: number) => {
    const newGoals = planningData.goals.filter((_, i) => i !== index);
    onPlanningChange({ goals: newGoals });
  };

  const updateGoal = (index: number, field: keyof Goal, value: any) => {
    const newGoals = [...planningData.goals];
    newGoals[index] = { ...newGoals[index], [field]: value };
    onPlanningChange({ goals: newGoals });
  };

  const addStrategy = (goalIndex: number) => {
    const newGoals = [...planningData.goals];
    newGoals[goalIndex].strategies.push("");
    onPlanningChange({ goals: newGoals });
  };

  const updateStrategy = (goalIndex: number, strategyIndex: number, value: string) => {
    const newGoals = [...planningData.goals];
    newGoals[goalIndex].strategies[strategyIndex] = value;
    onPlanningChange({ goals: newGoals });
  };

  const removeStrategy = (goalIndex: number, strategyIndex: number) => {
    const newGoals = [...planningData.goals];
    newGoals[goalIndex].strategies = newGoals[goalIndex].strategies.filter((_, i) => i !== strategyIndex);
    onPlanningChange({ goals: newGoals });
  };

  const ExampleTooltip = ({ title, examples }: { title: string, examples: string[] }) => (
    <HoverCard>
      <HoverCardTrigger asChild>
        <button type="button" className="ml-2 inline-flex items-center text-primary hover:text-primary/80">
          <Lightbulb className="h-4 w-4" />
        </button>
      </HoverCardTrigger>
      <HoverCardContent className="w-80">
        <div className="space-y-2">
          <h4 className="font-semibold text-sm">{title}</h4>
          <ul className="text-xs space-y-1 list-disc pl-4">
            {examples.map((example, idx) => (
              <li key={idx}>{example}</li>
            ))}
          </ul>
        </div>
      </HoverCardContent>
    </HoverCard>
  );

  return (
    <div className="space-y-6">
      <Alert className="bg-purple-50 dark:bg-purple-950/30 border-purple-200 dark:border-purple-800">
        <Info className="h-4 w-4 text-purple-600 dark:text-purple-400" />
        <AlertDescription className="text-sm text-purple-800 dark:text-purple-300">
          <strong>Dica:</strong> Use o bot√£o "Gerar com IA" para criar um planejamento baseado no diagn√≥stico, ou preencha manualmente as metas.
        </AlertDescription>
      </Alert>

      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold">Planejamento de Acessibilidade</h3>
          <p className="text-sm text-muted-foreground mt-1">
            Defina metas, estrat√©gias e recursos para promover a acessibilidade educacional
          </p>
        </div>
        <Button onClick={handleGenerateWithAI} disabled={generatingAI} variant="secondary">
          <Sparkles className="mr-2 h-4 w-4" />
          {generatingAI ? "Gerando..." : "Gerar com IA"}
        </Button>
      </div>

      <div className="space-y-4">
        {planningData.goals.map((goal, goalIndex) => (
          <Card key={goalIndex}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-base">Meta {goalIndex + 1}</CardTitle>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => removeGoal(goalIndex)}
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="flex items-center">
                  <Label>Descri√ß√£o da Meta</Label>
                  <ExampleTooltip
                    title="üí° Exemplos de Metas:"
                    examples={[
                      "Aumentar a autonomia do aluno nas atividades de leitura, conseguindo ler textos curtos com apoio visual at√© o final do semestre",
                      "Desenvolver habilidades de intera√ß√£o social, participando de atividades em grupo pelo menos 3 vezes por semana",
                      "Melhorar a coordena√ß√£o motora fina para escrita, conseguindo escrever o pr√≥prio nome de forma leg√≠vel"
                    ]}
                  />
                </div>
                <Textarea
                  placeholder="Descreva a meta de forma espec√≠fica, mensur√°vel e com prazo..."
                  value={goal.description}
                  onChange={(e) => updateGoal(goalIndex, "description", e.target.value)}
                  rows={2}
                  className="mt-2"
                />
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <Label>Estrat√©gias</Label>
                    <ExampleTooltip
                      title="üí° Exemplos de Estrat√©gias:"
                      examples={[
                        "Usar materiais visuais e concretos para apoiar a compreens√£o do conte√∫do",
                        "Dividir atividades complexas em etapas menores e mais gerenci√°veis",
                        "Oferecer tempo adicional para conclus√£o de tarefas",
                        "Utilizar jogos e recursos l√∫dicos para engajar o aluno"
                      ]}
                    />
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => addStrategy(goalIndex)}
                  >
                    <Plus className="h-3 w-3 mr-1" />
                    Adicionar
                  </Button>
                </div>
                <div className="space-y-2">
                  {goal.strategies.map((strategy, strategyIndex) => (
                    <div key={strategyIndex} className="flex gap-2">
                      <Textarea
                        placeholder={`Estrat√©gia ${strategyIndex + 1}`}
                        value={strategy}
                        onChange={(e) => updateStrategy(goalIndex, strategyIndex, e.target.value)}
                        rows={1}
                        className="flex-1"
                      />
                      {goal.strategies.length > 1 && (
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => removeStrategy(goalIndex, strategyIndex)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <div className="flex items-center">
                  <Label>Crit√©rios de Avalia√ß√£o</Label>
                  <ExampleTooltip
                    title="üí° Exemplos de Crit√©rios:"
                    examples={[
                      "Observa√ß√£o di√°ria e registro de frequ√™ncia de participa√ß√£o",
                      "Portf√≥lio com amostras de trabalhos realizados",
                      "Avalia√ß√£o quinzenal atrav√©s de atividades pr√°ticas",
                      "Relat√≥rio descritivo mensal do progresso observado"
                    ]}
                  />
                </div>
                <Textarea
                  placeholder="Como ser√° avaliado o progresso desta meta?"
                  value={goal.evaluationCriteria}
                  onChange={(e) => updateGoal(goalIndex, "evaluationCriteria", e.target.value)}
                  rows={2}
                  className="mt-2"
                />
              </div>

              <div>
                <div className="flex items-center">
                  <Label>Recursos de Acessibilidade/Tecnologia Assistiva</Label>
                  <ExampleTooltip
                    title="üí° Exemplos de Recursos:"
                    examples={[
                      "Tablet com aplicativos de comunica√ß√£o alternativa (CAA)",
                      "Material did√°tico adaptado com fonte ampliada e imagens",
                      "Apoio de estagi√°rio ou monitor durante as aulas",
                      "Livros em √°udio e v√≠deos com legenda",
                      "Mobili√°rio adaptado (cadeira, mesa ajust√°vel)"
                    ]}
                  />
                </div>
                <Textarea
                  placeholder="Liste os recursos, materiais e tecnologias necess√°rios..."
                  value={goal.resources}
                  onChange={(e) => updateGoal(goalIndex, "resources", e.target.value)}
                  rows={2}
                  className="mt-2"
                />
              </div>
            </CardContent>
          </Card>
        ))}

        <Button onClick={addGoal} variant="outline" className="w-full">
          <Plus className="mr-2 h-4 w-4" />
          Adicionar Meta
        </Button>
      </div>
    </div>
  );
};

export default PlanningSection;
